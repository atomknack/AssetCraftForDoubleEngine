using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UIElements;
using DoubleEngine;
using DoubleEngine.Atom;

namespace Atom
{


    [RequireComponent(typeof(UIDocument))]
    public class CreateAndUpdateList : MonoBehaviour
    {
        //public UnityEvent CreateConnectionNodeButtonClick;
        public ListView basePairListView;
        public ListView complimentaryRotationsListView;

        private VisualElement rootUI;
        public (FlatNode baseNode, FlatNode complimentary, int number)[] items;

        public List<(FlatNode baseNode, FlatNode complimentary)> subListItems;

        CombinationChanger _changer;

        private int _lastPairNodeIndex = -1;

        private Button _buttonComplimentary;
        private Button _buttonAutoGenerated;
        private void OnEnable()
        {
            rootUI = GetComponent<UIDocument>().rootVisualElement;

            basePairListView = rootUI.Q<ListView>("baseComplimentary-list");
            complimentaryRotationsListView = rootUI.Q<ListView>("rotations-list");

            _buttonComplimentary = rootUI.Q<Button>("ExportComplimentary");
            _buttonAutoGenerated = rootUI.Q<Button>("ExportAutoGenerated");
            UpdateBaseList();

            _changer = GetComponent<CombinationChanger>();

        }

        private void SelectedPairNodesToChange(int index)
        {
            DisableButtons();
            //Debug.Log($"SelectedPairNodesToChange {index} {subListItems[index]}");

            _lastPairNodeIndex = index;
            if (_lastPairNodeIndex != -1)// && _lastPairNodeIndex != index)
            {
                _changer.UpdateFlatNodes(subListItems[index].baseNode, subListItems[index].complimentary);
                EnableComplimentaryExportButton();
            }
        }

        private void UpdateRotationsList(int index)
        {
            DisableButtons();
            complimentaryRotationsListView.ClearSelection();
            UpdateRotationsListDataSource(index);

            Action<VisualElement, int> bindItem = (e, i) =>
            {
                (e.ElementAt(0) as Label).text = $"{subListItems[i].baseNode.id} {subListItems[i].complimentary.id} inv:{subListItems[i].complimentary.flatTransform.inverted}, rot:{subListItems[i].complimentary.flatTransform.rotation}";
            };
            complimentaryRotationsListView.itemsSource = subListItems;
            complimentaryRotationsListView.makeItem = makeListItem;
            complimentaryRotationsListView.bindItem = bindItem;
            //rotationsListView.AddToSelection(0);
            complimentaryRotationsListView.onSelectedIndicesChange += 
                x => { if (x.Count() > 0) SelectedPairNodesToChange(x.First()); else _changer.CleanFlatNodes(); };
        }

        private void UpdateRotationsListDataSource(int index)
        {
            subListItems = new List<(FlatNode baseNode, FlatNode complimentary)>();
            //Debug.Log($"Update Rotations List {index} {items[index]}");
            foreach (var flatTransform in FlatNodeTransform.allFlatNodeTransforms)
                subListItems.Add((items[index].baseNode, items[index].complimentary.TransformedByFlatNodeTransform(flatTransform)));
        }


        private void CleanRotationsList()
        {
            Debug.Log($"Clean Rotations List");
            throw new NotImplementedException();
        }

        private void UpdateBaseList()
        {
            DisableButtons();
            FlatNodes.LoadFromJsonFile();
            items = AvailableCombinations().ToArray();

            Action<VisualElement, int> bindItem = (e, i) =>
            {
                (e.ElementAt(0) as Label).text = $"{items[i].baseNode.id} {items[i].complimentary.id} {items[i].number}";
            };

            basePairListView.itemsSource = items;
            basePairListView.makeItem = makeListItem;
            basePairListView.bindItem = bindItem;

            basePairListView.onSelectedIndicesChange += x => { if (x.Any()) UpdateRotationsList(x.First()); else CleanRotationsList(); };

            basePairListView.AddToSelection(0);
            _lastPairNodeIndex = -1;
        }

        private readonly Func<VisualElement> makeListItem = () =>
        {
            var box = new VisualElement();
            box.style.flexDirection = FlexDirection.Row;
            box.style.flexGrow = 1f;
            box.style.flexShrink = 0f;
            box.style.flexBasis = 0f;
            box.Add(new Label());
            return box;
        };

        public IEnumerable<(FlatNode baseNode, FlatNode complimentary, int number)> AvailableCombinations()
        {
            //Debug.Log("AvailableCombinations Called");
            foreach (var baseNode in FlatNodes.AllDefaultNodes)
            {
                foreach (var complimentary in FlatNodes.AllDefaultNodes)
                {
                    //Debug.Log("foreach foreach AvailableCombinations Called");
                    yield return (baseNode, complimentary, ComplimentaryFlatNodes_Editor.DefaultToComplimentaryNodes
                        .Where(x => x.current == baseNode && x.complimentary.id == complimentary.id).Count());
                }
            }
        }

        private void DisableButtons()
        {
            DisableComplimentaryExportButton();
            DisableAutoGeneratedButton();
        }
        private void DisableAutoGeneratedButton() => _buttonAutoGenerated.SetEnabled(false);
        private void DisableComplimentaryExportButton() => _buttonComplimentary.SetEnabled(false);
        private void EnableComplimentaryExportButton() => _buttonComplimentary.SetEnabled(true);

}

}