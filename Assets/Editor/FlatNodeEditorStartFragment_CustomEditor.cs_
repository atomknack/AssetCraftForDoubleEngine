using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using Atom;
using UnityEngine.UIElements;
using UnityEditor.UIElements;

[CustomEditor(typeof(FlatNodeEditorStartFragment))]
public class FlatNodeEditorStartFragment_CustomEditor : Editor
{
    public bool foldVectors;
    public bool foldTriangles;
    public override void OnInspectorGUI()
    {
        // Create property container element.
        //var container = new VisualElement();
        MeshFragment? nullableFragment = ((FlatNodeEditorStartFragment)target).flatNode;
        // Create property fields.
        //var vertices = EditorGUILayout.new PropertyField();
        //vertices.Add(EditorGUILayout.)
        if (nullableFragment != null)
        {
            MeshFragment fragment = (MeshFragment)nullableFragment;
            if (foldVectors = EditorGUILayout.Foldout(foldVectors, "Vertices"))
            {
                EditorGUI.indentLevel++;

                for (var i = 0; i < fragment.vertices.Length; i++)
                {
                    //SerializedProperty ElementProperty = Property.GetArrayElementAtIndex(I);
                    EditorGUILayout.Vector3Field($"{i}", fragment.vertices[i]);
                }

                EditorGUI.indentLevel--;
            }
            if (foldTriangles = EditorGUILayout.Foldout(foldTriangles, "Triangles"))
            {
                EditorGUI.indentLevel++;

                for (var i = 0; i < fragment.triangles.Length; i++)
                {
                    //SerializedProperty ElementProperty = Property.GetArrayElementAtIndex(I);
                    EditorGUILayout.IntField($"{i}", fragment.triangles[i]);
                }

                EditorGUI.indentLevel--;
            }
        }
        else
        {
            EditorGUILayout.TextField("mesh fragment empty");
        }
        /*var faces = new PropertyField();

        var unitField = new PropertyField(property.FindPropertyRelative("unit"));
        var nameField = new PropertyField(property.FindPropertyRelative("name"), "Fancy Name");

        // Add fields to the container.
        container.Add(vertices);
        container.Add(faces);
        container.Add(nameField);*/
    }
}
